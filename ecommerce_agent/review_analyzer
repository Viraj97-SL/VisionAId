import logging
from textblob import TextBlob
from collections import Counter
import re
from typing import List, Dict  # Add these imports


class ReviewAnalyzer:
    def __init__(self):
        self.logger = logging.getLogger(__name__)

    def analyze_sentiment(self, reviews: List[str]) -> Dict:
        """Quantitative sentiment analysis"""
        sentiments = [TextBlob(review).sentiment.polarity for review in reviews]
        return {
            'average': sum(sentiments) / len(sentiments),
            'positive': len([s for s in sentiments if s > 0.1]),
            'negative': len([s for s in sentiments if s < -0.1])
        }

    def extract_keywords(self, reviews: List[str], n=5) -> List[str]:
        """Identify common terms"""
        words = []
        for review in reviews:
            words.extend(re.findall(r'\b\w{4,}\b', review.lower()))
        return [word for word, count in Counter(words).most_common(n)]

    def generate_report(self, product_name: str, reviews: List[str]) -> str:
        """Generate comprehensive review summary"""
        if not reviews:
            return f"No reviews found for {product_name}"

        sentiment = self.analyze_sentiment(reviews)
        keywords = self.extract_keywords(reviews)

        report = f"📊 Review Analysis for {product_name}:\n"
        report += f"- 👍 Positive: {sentiment['positive']} reviews\n"
        report += f"- 👎 Negative: {sentiment['negative']} reviews\n"
        report += f"- 🔍 Key Themes: {', '.join(keywords)}\n"

        return report
